/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram WebApp
 */
import React, { useEffect, useState } from 'react';
import { useTelegramWebApp } from '../hooks/useTelegramWebApp';

const TelegramIntegrationDemo: React.FC = () => {
  const { isAvailable, user, initData, webApp } = useTelegramWebApp();
  const [stars, setStars] = useState(0);

  useEffect(() => {
    if (isAvailable && user) {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
      webApp.setMainButton('–ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã', () => {
        handleBuyStars();
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      webApp.setBackButton(() => {
        webApp.close();
      });

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      fetchUserBalance();
    }

    return () => {
      // –û—á–∏—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (isAvailable) {
        webApp.hideMainButton();
        webApp.hideBackButton();
      }
    };
  }, [isAvailable, user]);

  const fetchUserBalance = async () => {
    if (!user) return;

    try {
      const response = await fetch(`/api/users/${user.id}`, {
        headers: {
          'Authorization': `Bearer ${initData}`
        }
      });

      if (response.ok) {
        const userData = await response.json();
        setStars(userData.stars_balance || 0);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    }
  };

  const handleBuyStars = async () => {
    if (!isAvailable) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥
    const packages = [
      { stars: 100, price: '$2.00' },
      { stars: 500, price: '$8.00' },
      { stars: 1000, price: '$15.00' }
    ];

    // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å popup —Å –≤—ã–±–æ—Ä–æ–º –ø–∞–∫–µ—Ç–∞
    const result = await webApp.showPopup(
      '–ü–æ–∫—É–ø–∫–∞ –∑–≤—ë–∑–¥',
      '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏',
      packages.map(pkg => ({
        text: `${pkg.stars} ‚≠ê - ${pkg.price}`,
        type: 'default'
      }))
    );

    if (result && packages[parseInt(result)]) {
      const selectedPackage = packages[parseInt(result)];
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ –±–æ—Ç—É
      webApp.sendData({
        action: 'buy_stars',
        package: selectedPackage,
        user_id: user?.id
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–¥–±–µ–∫
      webApp.hapticFeedback('success');
      await webApp.showAlert(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É ${selectedPackage.stars} –∑–≤—ë–∑–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!`);
    }
  };

  const handlePlayGame = (gameType: string) => {
    if (!isAvailable) return;

    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    webApp.hapticFeedback('light');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
    webApp.sendData({
      action: 'start_game',
      game_type: gameType,
      user_id: user?.id
    });
  };

  if (!isAvailable) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <h2 className="text-xl font-bold mb-4">–ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ Telegram</h2>
          <p className="text-gray-600">
            –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram Bot
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-4">
      <div className="max-w-md mx-auto">
        {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ */}
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-gray-800 mb-2">
              –ü—Ä–∏–≤–µ—Ç, {user?.first_name}! üëã
            </h1>
            <div className="flex items-center justify-center space-x-2">
              <span className="text-lg">‚≠ê</span>
              <span className="text-xl font-bold text-yellow-600">{stars}</span>
              <span className="text-gray-600">–∑–≤—ë–∑–¥</span>
            </div>
          </div>
        </div>

        {/* –ò–≥—Ä—ã */}
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
          <h2 className="text-xl font-bold text-gray-800 mb-4">üéÆ –ò–≥—Ä—ã</h2>
          <div className="space-y-3">
            <button
              onClick={() => handlePlayGame('dice')}
              className="w-full bg-gradient-to-r from-blue-500 to-blue-600 text-white py-3 px-4 rounded-xl font-medium hover:from-blue-600 hover:to-blue-700 transition-all"
            >
              üé≤ –ö–æ—Å—Ç–∏
            </button>
            <button
              onClick={() => handlePlayGame('rps')}
              className="w-full bg-gradient-to-r from-green-500 to-green-600 text-white py-3 px-4 rounded-xl font-medium hover:from-green-600 hover:to-green-700 transition-all"
            >
              ‚úÇÔ∏è –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞
            </button>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="bg-white rounded-2xl shadow-lg p-6">
          <h2 className="text-xl font-bold text-gray-800 mb-4">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
          <div className="grid grid-cols-2 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">0</div>
              <div className="text-sm text-gray-600">–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">0</div>
              <div className="text-sm text-gray-600">–ü–æ–±–µ–¥</div>
            </div>
          </div>
        </div>

        {/* Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) */}
        {process.env.NODE_ENV === 'development' && (
          <div className="bg-gray-100 rounded-xl p-4 mt-6">
            <h3 className="font-bold mb-2">Debug Info:</h3>
            <pre className="text-xs overflow-auto">
              {JSON.stringify({
                isAvailable,
                user,
                initDataLength: initData.length
              }, null, 2)}
            </pre>
          </div>
        )}
      </div>
    </div>
  );
};

export default TelegramIntegrationDemo;
