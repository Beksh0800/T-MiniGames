import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import aiohttp
import os
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "https://your-domain.com")
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# URL –≤–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://your-app.vercel.app")
API_URL = os.getenv("API_URL", "https://your-api.railway.app")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

class GameBot:
    def __init__(self):
        self.bot = bot
        
    async def get_user_balance(self, telegram_id: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{API_URL}/api/player/{telegram_id}/balance") as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        return data.get("balance", 1000)
                    return 1000  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        except Exception as e:
            logger.error(f"Error getting balance: {e}")
            return 1000

    async def create_user_if_not_exists(self, user: types.User) -> None:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        try:
            async with aiohttp.ClientSession() as session:
                user_data = {
                    "telegram_id": str(user.id),
                    "username": user.username or f"user_{user.id}",
                    "first_name": user.first_name,
                    "last_name": user.last_name
                }
                async with session.post(f"{API_URL}/api/player/create", json=user_data) as resp:
                    if resp.status in [200, 201]:
                        logger.info(f"User {user.id} created/updated successfully")
                    else:
                        logger.warning(f"Failed to create user {user.id}: {resp.status}")
        except Exception as e:
            logger.error(f"Error creating user: {e}")

game_bot = GameBot()

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await game_bot.create_user_if_not_exists(message.from_user)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    args = message.text.split()
    if len(args) > 1 and args[1].startswith("join_"):
        room_id = args[1].replace("join_", "")
        webapp_url = f"{WEBAPP_URL}?room_id={room_id}"
        welcome_text = f"üéÆ –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –∏–≥—Ä—É!\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ: `{room_id}`"
    else:
        webapp_url = WEBAPP_URL
        welcome_text = "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mini Games Live!"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üöÄ –ò–≥—Ä–∞—Ç—å", 
            web_app=WebAppInfo(url=webapp_url)
        )],
        [InlineKeyboardButton(
            text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", 
            callback_data="balance"
        )],
        [InlineKeyboardButton(
            text="üìã –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä", 
            callback_data="rules"
        )]
    ])

    await message.answer(
        f"{welcome_text}\n\n"
        "üé≤ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:**\n"
        "‚Ä¢ –ö—É–±–∏–∫–∏ - –±—Ä–æ—Å–∞–π—Ç–µ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ!\n"
        "‚Ä¢ –ö–∞—Ä—Ç—ã 21 - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞\n"
        "‚Ä¢ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ - –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤\n\n"
        "üí´ –ò–≥—Ä–∞–π—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!\n"
        "‚≠ê –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã –∏ –ø–æ–±–µ–∂–¥–∞–π—Ç–µ!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.message(Command("balance"))
async def balance_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await game_bot.create_user_if_not_exists(message.from_user)
    balance = await game_bot.get_user_balance(str(message.from_user.id))
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üöÄ –ò–≥—Ä–∞—Ç—å", 
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ])
    
    await message.answer(
        f"üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** {balance} ‚≠ê\n\n"
        "–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥, –ø–æ–±–µ–∂–¥–∞—è –≤ –∏–≥—Ä–∞—Ö!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    help_text = """
üéÆ **Mini Games Live - –ü–æ–º–æ—â—å**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
‚Ä¢ /balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ "üöÄ –ò–≥—Ä–∞—Ç—å" —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
2. –í—ã–±–µ—Ä–∏—Ç–µ "üî¥ LIVE –ò–≥—Ä—ã" –¥–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–∑—å—è–º–∏
3. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
4. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É
5. –ò–≥—Ä–∞–π—Ç–µ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã!

**–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä:**
üé≤ **–ö—É–±–∏–∫–∏** - —É –∫–æ–≥–æ –±–æ–ª—å—à–µ —Å—É–º–º–∞, —Ç–æ—Ç –ø–æ–±–µ–¥–∏–ª
üÉè **–ö–∞—Ä—Ç—ã 21** - –Ω–∞–±–µ—Ä–∏—Ç–µ 21 –∏–ª–∏ –±–ª–∏–∂–µ –∫ 21
‚úÇÔ∏è **–†–ü–°** - –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–≥—Ä–æ–∫–æ–≤

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @your_support_username
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üöÄ –ò–≥—Ä–∞—Ç—å", 
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ])
    
    await message.answer(help_text, reply_markup=keyboard, parse_mode="Markdown")

@dp.callback_query(lambda c: c.data == "balance")
async def balance_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
    await game_bot.create_user_if_not_exists(callback_query.from_user)
    balance = await game_bot.get_user_balance(str(callback_query.from_user.id))
    
    await callback_query.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê")

@dp.callback_query(lambda c: c.data == "rules")
async def rules_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–∏–ª"""
    rules_text = """
üé≤ **–ö—É–±–∏–∫–∏:**
–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –±—Ä–æ—Å–∞–µ—Ç 2 –∫—É–±–∏–∫–∞. –£ –∫–æ–≥–æ –±–æ–ª—å—à–µ —Å—É–º–º–∞ - —Ç–æ—Ç –ø–æ–±–µ–¥–∏–ª. –ü—Ä–∏ –Ω–∏—á—å–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–±—Ä–æ—Å.

üÉè **–ö–∞—Ä—Ç—ã 21:**
–¶–µ–ª—å - –Ω–∞–±—Ä–∞—Ç—å 21 –æ—á–∫–æ –∏–ª–∏ –±–ª–∏–∂–µ –∫ 21, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–≤. –¢—É–∑ = 1 –∏–ª–∏ 11. –•–æ–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏, 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ö–æ–¥.

‚úÇÔ∏è **–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞:**
–í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–±–∏—Ä–∞—é—Ç. –ö–∞–º–µ–Ω—å –±—å—ë—Ç –Ω–æ–∂–Ω–∏—Ü—ã, –Ω–æ–∂–Ω–∏—Ü—ã - –±—É–º–∞–≥—É, –±—É–º–∞–≥–∞ - –∫–∞–º–µ–Ω—å.

üí∞ **–ü—Ä–∏–∑—ã:**
–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∑–∞–±–∏—Ä–∞–µ—Ç –≤–µ—Å—å –±–∞–Ω–∫. –ü—Ä–∏ –Ω–∏—á—å–µ–π —Å—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è.
    """
    
    await callback_query.answer(rules_text, show_alert=True)

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        update = types.Update.model_validate(await request.json())
        await dp.feed_update(bot, update)
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return web.Response(status=500)

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
    try:
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"Webhook set to {WEBHOOK_URL}")
    except Exception as e:
        logger.error(f"Failed to set webhook: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    await setup_webhook()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = web.Application()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
    app.router.add_post(WEBHOOK_PATH, webhook_handler)
    
    # –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
    async def health(request):
        return web.json_response({"status": "ok", "bot": "running"})
    
    app.router.add_get("/health", health)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    async def bot_info(request):
        try:
            me = await bot.get_me()
            return web.json_response({
                "bot_username": me.username,
                "bot_name": me.first_name,
                "webhook_url": WEBHOOK_URL,
                "webapp_url": WEBAPP_URL
            })
        except Exception as e:
            return web.json_response({"error": str(e)}, status=500)
    
    app.router.add_get("/bot/info", bot_info)
    
    logger.info("Bot server starting...")
    return app

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    async def dev_mode():
        logger.info("Starting bot in development mode (polling)")
        await bot.delete_webhook()
        await dp.start_polling(bot)
    
    if os.getenv("DEV_MODE", "true") == "true":
        asyncio.run(dev_mode())
    else:
        # –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        app = asyncio.run(main())
        web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 8080)))
