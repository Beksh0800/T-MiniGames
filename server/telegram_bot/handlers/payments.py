"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram –ø–ª–∞—Ç–µ–∂–µ–π
"""
from aiogram import Router, F
from aiogram.types import (
    Message, 
    PreCheckoutQuery, 
    LabeledPrice,
    CallbackQuery
)
from aiogram.exceptions import TelegramBadRequest

import logging
from typing import List

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from ..bot_config import get_bot
from config import Settings

logger = logging.getLogger(__name__)

# –†–æ—É—Ç–µ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
payments_router = Router()

settings = Settings()


async def send_payment_invoice(
    chat_id: int, 
    stars: int, 
    price_cents: int
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤—ë–∑–¥
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        stars: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥
        price_cents: –¶–µ–Ω–∞ –≤ —Ü–µ–Ω—Ç–∞—Ö (USD)
    """
    try:
        bot = get_bot()
        
        if not settings.TELEGRAM_PAYMENT_PROVIDER_TOKEN:
            logger.error("TELEGRAM_PAYMENT_PROVIDER_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω
        prices = [LabeledPrice(label=f"{stars} –∑–≤—ë–∑–¥", amount=price_cents)]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        await bot.send_invoice(
            chat_id=chat_id,
            title=f"–ü–æ–∫—É–ø–∫–∞ {stars} –∑–≤—ë–∑–¥",
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {stars} –∑–≤—ë–∑–¥ –¥–ª—è –∏–≥—Ä T-MiniGames",
            payload=f"stars_{stars}_{chat_id}",  # –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            provider_token=settings.TELEGRAM_PAYMENT_PROVIDER_TOKEN,
            currency="USD",
            prices=prices,
            start_parameter="purchase-stars",
            is_flexible=False,
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            photo_url="https://your-domain.com/star-icon.png",  # –ò–∫–æ–Ω–∫–∞ –∑–≤–µ–∑–¥—ã
            photo_size=512,
            photo_width=512,
            photo_height=512,
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            send_phone_number_to_provider=False,
            send_email_to_provider=False
        )
        
        logger.info(f"–ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –Ω–∞ —Å—É–º–º—É {price_cents/100}$ –∑–∞ {stars} –∑–≤—ë–∑–¥")
        return True
        
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞: {e}")
        return False


@payments_router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ-—á–µ–∫–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
    """
    try:
        # –ü–∞—Ä—Å–∏–º payload
        payload = pre_checkout_query.invoice_payload
        logger.info(f"Pre-checkout query –æ—Ç {pre_checkout_query.from_user.id}, payload: {payload}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º payload
        if not payload.startswith("stars_"):
            await pre_checkout_query.answer(
                ok=False,
                error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞"
            )
            return
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
        # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        # - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        await pre_checkout_query.answer(ok=True)
        logger.info(f"Pre-checkout –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {pre_checkout_query.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pre_checkout_query: {e}")
        await pre_checkout_query.answer(
            ok=False,
            error_message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        )


@payments_router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    """
    try:
        payment = message.successful_payment
        user_id = message.from_user.id
        
        # –ü–∞—Ä—Å–∏–º payload
        payload = payment.invoice_payload
        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç {user_id}: {payload}")
        
        if not payload.startswith("stars_"):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload: {payload}")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
        try:
            _, stars_str, user_id_str = payload.split("_")
            stars = int(stars_str)
            expected_user_id = int(user_id_str)
        except (ValueError, IndexError):
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ payload: {payload}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id != expected_user_id:
            logger.error(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id} != {expected_user_id}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        amount_cents = payment.total_amount
        currency = payment.currency
        provider_payment_charge_id = payment.provider_payment_charge_id
        telegram_payment_charge_id = payment.telegram_payment_charge_id
        
        logger.info(f"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}
- –ó–≤—ë–∑–¥—ã: {stars}
- –°—É–º–º–∞: {amount_cents/100} {currency}
- Provider ID: {provider_payment_charge_id}
- Telegram ID: {telegram_payment_charge_id}
""")
        
        # TODO: –ó–∞–ø–∏—Å–∞—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # await add_stars_to_user(user_id, stars)
        # await save_payment_record(user_id, stars, amount_cents, provider_payment_charge_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success_text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!</b>

üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ‚≠ê {stars} –∑–≤—ë–∑–¥
üí≥ –°—É–º–º–∞: ${amount_cents/100:.2f}
üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {telegram_payment_charge_id[:8]}...

–ó–≤—ë–∑–¥—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã üéÆ
"""
        
        await message.answer(success_text)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        logger.info(f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. "
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."
        )


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏

async def create_custom_invoice(
    chat_id: int,
    title: str,
    description: str,
    prices: List[LabeledPrice],
    payload: str,
    **kwargs
) -> bool:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞
    """
    try:
        bot = get_bot()
        
        await bot.send_invoice(
            chat_id=chat_id,
            title=title,
            description=description,
            payload=payload,
            provider_token=settings.TELEGRAM_PAYMENT_PROVIDER_TOKEN,
            currency="USD",
            prices=prices,
            **kwargs
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞: {e}")
        return False


def get_stars_packages() -> List[tuple]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∑–≤—ë–∑–¥
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∑–≤—ë–∑–¥—ã, —Ü–µ–Ω–∞_–≤_—Ü–µ–Ω—Ç–∞—Ö, –æ–ø–∏—Å–∞–Ω–∏–µ)
    """
    return [
        (100, 200, "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç"),
        (500, 800, "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –≤—ã–±–æ—Ä"),
        (1000, 1500, "–í—ã–≥–æ–¥–Ω–æ"),
        (2500, 3500, "–î–ª—è –ø—Ä–æ—Ñ–∏"),
        (5000, 6000, "–ú–∞–∫—Å–∏–º—É–º")
    ]


def calculate_bonus_stars(stars: int) -> int:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –∑–≤—ë–∑–¥—ã –∑–∞ –ø–æ–∫—É–ø–∫—É
    """
    if stars >= 5000:
        return int(stars * 0.2)  # 20% –±–æ–Ω—É—Å
    elif stars >= 1000:
        return int(stars * 0.1)  # 10% –±–æ–Ω—É—Å
    elif stars >= 500:
        return int(stars * 0.05)  # 5% –±–æ–Ω—É—Å
    return 0
