"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from typing import Any
import logging

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
commands_router = Router()


class UserStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    waiting_for_amount = State()


@commands_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = message.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    from config import Settings
    settings = Settings()
    webapp_url = settings.TELEGRAM_WEBAPP_URL or "https://t-mini-games.vercel.app/"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å", web_app={
                "url": webapp_url
            })],
            [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã", callback_data="buy_stars")],
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton(text="üìä –†–µ–π—Ç–∏–Ω–≥", callback_data="leaderboard")]
        ]
    )
    
    welcome_text = f"""
üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ T-MiniGames!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

üé≤ –ò–≥—Ä–∞–π –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –º–∏–Ω–∏-–∏–≥—Ä—ã
‚≠ê –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∑–≤—ë–∑–¥—ã  
üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–∑—å—è–º–∏
üíé –°–æ–±–∏—Ä–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ NFT

<b>–ù–∞–∂–º–∏ "üéÆ –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å" —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—ã!</b>
"""
    
    await message.answer(welcome_text, reply_markup=keyboard)
    await state.clear()


@commands_router.callback_query(F.data == "buy_stars")
async def process_buy_stars(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚≠ê 100 –∑–≤—ë–∑–¥ - $2", callback_data="buy:100:200")],
            [InlineKeyboardButton(text="‚≠ê 500 –∑–≤—ë–∑–¥ - $8", callback_data="buy:500:800")],
            [InlineKeyboardButton(text="‚≠ê 1000 –∑–≤—ë–∑–¥ - $15", callback_data="buy:1000:1500")],
            [InlineKeyboardButton(text="‚≠ê 5000 –∑–≤—ë–∑–¥ - $60", callback_data="buy:5000:6000")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    text = """
üí∞ <b>–ü–æ–∫—É–ø–∫–∞ –∑–≤—ë–∑–¥</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:

‚≠ê –ó–≤—ë–∑–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è:
‚Ä¢ –£—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–∞—Ö
‚Ä¢ –ü–æ–∫—É–ø–∫–∏ NFT –∫–µ–π—Å–æ–≤
‚Ä¢ –¢—É—Ä–Ω–∏—Ä–æ–≤ –∏ —Å–æ–±—ã—Ç–∏–π
"""
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@commands_router.callback_query(F.data.startswith("buy:"))
async def process_payment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        _, stars_str, price_str = callback.data.split(":")
        stars = int(stars_str)
        price_cents = int(price_str)  # –¶–µ–Ω–∞ –≤ —Ü–µ–Ω—Ç–∞—Ö
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        await state.update_data({
            "stars": stars,
            "price_cents": price_cents
        })
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        text = f"""
üí≥ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>

–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: ‚≠ê {stars} –∑–≤—ë–∑–¥
–¶–µ–Ω–∞: ${price_cents/100:.2f}

–ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.
"""
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="confirm_payment")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="buy_stars")]
            ]
        )
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@commands_router.callback_query(F.data == "confirm_payment")
async def confirm_payment(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    from .payments import send_payment_invoice
    
    data = await state.get_data()
    stars = data.get("stars", 100)
    price_cents = data.get("price_cents", 200)
    
    success = await send_payment_invoice(
        chat_id=callback.message.chat.id,
        stars=stars,
        price_cents=price_cents
    )
    
    if success:
        await callback.answer("–ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞", show_alert=True)


@commands_router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = callback.from_user
    
    # TODO: –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    text = f"""
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>

üÜî ID: {user.id}
üë§ –ò–º—è: {user.first_name}
‚≠ê –ó–≤—ë–∑–¥—ã: 0
üèÜ –†–µ–π—Ç–∏–Ω–≥: 1500
üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: 0
üèÖ –ü–æ–±–µ–¥: 0
"""
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@commands_router.callback_query(F.data == "leaderboard")
async def show_leaderboard(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
    text = """
üìä <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤</b>

ü•á 1. Player1 - 2500 ‚≠ê
ü•à 2. Player2 - 2200 ‚≠ê  
ü•â 3. Player3 - 1900 ‚≠ê
4. Player4 - 1750 ‚≠ê
5. Player5 - 1600 ‚≠ê

–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: #42
"""
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@commands_router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await cmd_start(callback.message, state)
    await callback.answer()


@commands_router.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üÜò <b>–ü–æ–º–æ—â—å</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/balance - –ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥

üéÆ <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏ "–û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—ã" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
2. –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É (–ö–æ—Å—Ç–∏, –ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞)
3. –î–µ–ª–∞–π —Å—Ç–∞–≤–∫–∏ –∑–≤—ë–∑–¥–∞–º–∏
4. –í—ã–∏–≥—Ä—ã–≤–∞–π –∏ –ø–æ–¥–Ω–∏–º–∞–π—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!

üí∞ <b>–ü–æ–∫—É–ø–∫–∞ –∑–≤—ë–∑–¥:</b>
–ù–∞–∂–º–∏ "–ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã" –≤ –º–µ–Ω—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.

‚ùì –í–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ @support_bot
"""
    
    await message.answer(help_text)


@commands_router.message(Command("profile"))
async def cmd_profile(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /profile"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    from aiogram.types import CallbackQuery
    fake_callback = CallbackQuery(
        id="fake",
        from_user=message.from_user,
        chat_instance="fake",
        message=message,
        data="profile"
    )
    await show_profile(fake_callback)


@commands_router.message(Command("balance"))
async def cmd_balance(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /balance"""
    # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –ë–î
    balance = 0
    
    text = f"""
üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>

‚≠ê –ó–≤—ë–∑–¥—ã: {balance}

–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start ‚Üí "–ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã"
"""
    
    await message.answer(text)
